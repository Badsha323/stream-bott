# (c) @Avishkarpatil


import asyncio
import WebStreamer.utils.Translation as Translation
from WebStreamer.bot import StreamBot
from WebStreamer.utils.database import Database
from WebStreamer.utils.human_readable import humanbytes
from urllib.parse import quote_plus
from WebStreamer.utils.mimetype import get_media_file_name, get_media_file_size, get_media_file_unique_id, get_media_mime_type
from WebStreamer.vars import Var
from pyrogram import filters, Client
from pyrogram.errors import FloodWait, UserNotParticipant
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
db = Database(Var.DATABASE_URL, Var.SESSION_NAME)

@StreamBot.on_message(
    filters.private
    & (
        filters.document
        | filters.video
        | filters.audio
        | filters.animation
        | filters.voice
        | filters.video_note
        | filters.photo
        | filters.sticker
    ),
    group=4,
)
async def private_receive_handler(c: Client, m: Message):
    lang = getattr(Translation, m.from_user.language_code)
    # Check The User is Banned or Not
    if await db.is_user_banned(m.from_user.id):
        await c.send_message(
                chat_id=m.chat.id,
                text="__S·¥è Ä Ä è S…™ Ä, Y·¥è·¥ú ·¥Ä Ä·¥á B·¥Ä…¥…¥·¥á·¥Ö ·¥õ·¥è ·¥ús·¥á ·¥ç·¥á. C·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥õ ú·¥á D·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä__\n\n @DeekshithSH **T ú·¥á è W…™ ü ü H·¥á ü·¥ò Y·¥è·¥ú**",
                parse_mode="markdown",
                disable_web_page_preview=True
            )
        await c.send_message(
                Var.BIN_CHANNEL,
                f"**Banned User** [{m.from_user.first_name}](tg://user?id={m.from_user.id}) **Trying to Access the bot \n User ID: {m.chat.id,}**"
             )
        return
    if not await db.is_user_exist(m.from_user.id):
        await db.add_user(m.from_user.id)
        await c.send_message(
            Var.BIN_CHANNEL,
            f"N·¥á·¥° Us·¥á Ä J·¥è…™…¥·¥á·¥Ö : \n\nN·¥Ä·¥ç·¥á : [{m.from_user.first_name}](tg://user?id={m.from_user.id}) S·¥õ·¥Ä Ä·¥õ·¥á·¥Ö Y·¥è·¥ú Ä B·¥è·¥õ !!"
        )
    if Var.FORCE_UPDATES_CHANNEL:
        try:
            user = await c.get_chat_member(Var.UPDATES_CHANNEL, m.chat.id)
            if user.status == "kicked":
                await c.send_message(
                    chat_id=m.chat.id,
                    text="__S·¥è Ä Ä è S…™ Ä, Y·¥è·¥ú ·¥Ä Ä·¥á B·¥Ä…¥…¥·¥á·¥Ö ·¥õ·¥è ·¥ús·¥á ·¥ç·¥á.__\n\n  **C·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ D·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä @DeekshithSH T ú·¥á è W…™ ü ü H·¥á ü·¥ò Y·¥è·¥ú**",
                    parse_mode="markdown",
                    disable_web_page_preview=True
                )
                return
        except UserNotParticipant:
            await c.send_message(
                chat_id=m.chat.id,
                text="""<i>J·¥è…™…¥ ·¥ç è ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥õ·¥è ·¥úÍú±·¥á ·¥ç·¥á üîê</i>""",
                reply_markup=InlineKeyboardMarkup(
                    [[ InlineKeyboardButton("J·¥è…™…¥ …¥·¥è·¥° üîì", url=f"https://t.me/{Var.UPDATES_CHANNEL}") ]]
                ),
                parse_mode="HTML"
            )
            return
        except Exception:
            await c.send_message(
                chat_id=m.chat.id,
                text="**S·¥è·¥ç·¥á·¥õ ú…™…¥…¢ ·¥°·¥á…¥·¥õ W Ä·¥è…¥…¢. C·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥ç è  ô·¥èss** @DeekshithSH",
                parse_mode="markdown",
                disable_web_page_preview=True)
            return

    try:
        log_msg = await m.forward(chat_id=Var.BIN_CHANNEL)
        file_name = get_media_file_name(log_msg)
        file_size = humanbytes(get_media_file_size(log_msg))

        if Var.PAGE_LINK:
            media_type = get_media_mime_type(log_msg)
            page_link = f"https://{Var.PAGE_LINK}/?id={log_msg.message_id}&type={media_type}"
        else:
            page_link = f"{Var.URL}watch/{log_msg.message_id}"

        settings, in_db = await db.Current_Settings_Link(m.from_user.id)
        if in_db and settings['LinkWithBoth']:
            stream_link = f"{Var.URL}{log_msg.message_id}"
            stream_link2 = f"{Var.URL}{log_msg.message_id}/{quote_plus(get_media_file_name(m))}"
            Stream_Text=lang.msg_bothlink_text.format(file_name, file_size, stream_link, stream_link2, page_link)
        elif in_db and not settings['LinkWithName']:
            stream_link = f"{Var.URL}{log_msg.message_id}"
            Stream_Text=lang.stream_msg_text.format(file_name, file_size, stream_link, page_link)
        else:
            stream_link = f"{Var.URL}{log_msg.message_id}/{quote_plus(get_media_file_name(m))}"
            Stream_Text=lang.stream_msg_text.format(file_name, file_size, stream_link, page_link)

        await log_msg.reply_text(text=f"**R·¥áQ·¥ú·¥áÍú±·¥õ·¥á·¥Ö  ô è :** [{m.from_user.first_name}](tg://user?id={m.from_user.id})\n**UÍú±·¥á Ä …™·¥Ö :** `{m.from_user.id}`\n**D·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö  ü…™…¥·¥ã :** {stream_link}", disable_web_page_preview=True, parse_mode="Markdown", quote=True)

        await m.reply_text(
            text=Stream_Text,
            parse_mode="HTML",
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üñ•STREAM", url=page_link), InlineKeyboardButton("D·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö üì•", url=stream_link)],
            [InlineKeyboardButton("‚ùå Delete Link", callback_data=f"msgdelconf2_{log_msg.message_id}_{get_media_file_unique_id(log_msg)}")]]),
            quote=True
        )
    except FloodWait as e:
        print(f"Sleeping for {str(e.x)}s")
        await asyncio.sleep(e.x)
        await c.send_message(chat_id=Var.BIN_CHANNEL, text=f"G·¥è·¥õ F ü·¥è·¥è·¥ÖW·¥Ä…™·¥õ ·¥è“ì {str(e.x)}s from [{m.from_user.first_name}](tg://user?id={m.from_user.id})\n\n**ùöÑùöúùöéùöõ ùô∏ùô≥ :** `{str(m.from_user.id)}`", disable_web_page_preview=True, parse_mode="Markdown")


@StreamBot.on_message(filters.channel & (filters.document | filters.video) & ~filters.edited, group=-1)
async def channel_receive_handler(bot, broadcast: Message):
    if int(broadcast.chat.id) in Var.BANNED_CHANNELS:
        await bot.leave_chat(broadcast.chat.id)
        return
    try:
        log_msg = await broadcast.forward(chat_id=Var.BIN_CHANNEL)
        # stream_link = "https://{}/{}".format(Var.FQDN, log_msg.message_id) if Var.ON_HEROKU or Var.NO_PORT else \
        #     "http://{}:{}/{}".format(Var.FQDN,
        #                             Var.PORT,
        #                             log_msg.message_id)
        await log_msg.reply_text(
            text=f"**C ú·¥Ä…¥…¥·¥á ü N·¥Ä·¥ç·¥á:** `{broadcast.chat.title}`\n**C ú·¥Ä…¥…¥·¥á ü ID:** `{broadcast.chat.id}`\n**R·¥á«´·¥ú·¥ás·¥õ ·¥ú Ä ü:** https://t.me/{(await bot.get_me()).username}?start=msgid_{str(log_msg.message_id)}",
            # text=f"**C ú·¥Ä…¥…¥·¥á ü N·¥Ä·¥ç·¥á:** `{broadcast.chat.title}`\n**C ú·¥Ä…¥…¥·¥á ü ID:** `{broadcast.chat.id}`\n**R·¥á«´·¥ú·¥ás·¥õ ·¥ú Ä ü:** https://t.me/FxStreamBot?start=msgid_{str(log_msg.message_id)}",
            quote=True,
            parse_mode="Markdown"
        )
        await bot.edit_message_reply_markup(
            chat_id=broadcast.chat.id,
            message_id=broadcast.message_id,
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("D·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö  ü…™…¥·¥ã üì•", url=f"https://t.me/{(await bot.get_me()).username}?start=msgid_{str(log_msg.message_id)}_{get_media_file_unique_id(log_msg)}")]])
            # [[InlineKeyboardButton("D·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö  ü…™…¥·¥ã üì•", url=f"https://t.me/FxStreamBot?start=msgid_{str(log_msg.message_id)}")]])
        )
    except FloodWait as w:
        print(f"Sleeping for {str(w.x)}s")
        await asyncio.sleep(w.x)
        await bot.send_message(chat_id=Var.BIN_CHANNEL,
                             text=f"G·¥è·¥õ F ü·¥è·¥è·¥ÖW·¥Ä…™·¥õ ·¥è“ì {str(w.x)}s from {broadcast.chat.title}\n\n**C ú·¥Ä…¥…¥·¥á ü ID:** `{str(broadcast.chat.id)}`",
                             disable_web_page_preview=True, parse_mode="Markdown")
    except Exception as e:
        await bot.send_message(chat_id=Var.BIN_CHANNEL, text=f"**#·¥á Ä Ä·¥è Ä_·¥õ Ä·¥Ä·¥Ñ·¥á ô·¥Ä·¥Ñ·¥ã:** `{e}`", disable_web_page_preview=True, parse_mode="Markdown")
        print(f"C·¥Ä…¥'·¥õ E·¥Ö…™·¥õ B Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ M·¥áss·¥Ä…¢·¥á!\nE Ä Ä·¥è Ä: {e}")

# Feature is Dead no New Update for Stream Link on Group
@StreamBot.on_message(filters.group & (filters.document | filters.video | filters.audio) & ~filters.edited, group=4)
async def private_receive_handler(c: Client, m: Message):
    try:
        lang = getattr(Translation, m.from_user.language_code)
        log_msg = await m.forward(chat_id=Var.BIN_CHANNEL)
        file_name = get_media_file_name(log_msg)
        file_size = humanbytes(get_media_file_size(log_msg))

        stream_link = f"{Var.URL}{log_msg.message_id}/{quote_plus(get_media_file_name(m))}"

        await log_msg.reply_text(text=f"**R·¥áQ·¥ú·¥áÍú±·¥õ·¥á·¥Ö  ô è :** [{m.from_user.first_name}](tg://user?id={m.from_user.id})\n**UÍú±·¥á Ä …™·¥Ö :** `{m.from_user.id}`\n**D·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö  ü…™…¥·¥ã :** {stream_link}", disable_web_page_preview=True, parse_mode="Markdown", quote=True)
        if Var.PAGE_LINK:
            media_type = get_media_mime_type(log_msg)
            page_link = f"https://{Var.PAGE_LINK}/?id={log_msg.message_id}&type={media_type}"
        else:
            page_link = f"{Var.URL}watch/{log_msg.message_id}"

        await m.reply_text(
            text=lang.group_msgs_text.format(file_name, file_size, stream_link, page_link),
            parse_mode="HTML",
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üñ•STREAM", url=page_link), InlineKeyboardButton("D·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö üì•", url=stream_link)]]),
            quote=True
        )
    except FloodWait as e:
        print(f"Sleeping for {str(e.x)}s")
        await asyncio.sleep(e.x)
        await c.send_message(chat_id=Var.BIN_CHANNEL, text=f"G·¥è·¥õ F ü·¥è·¥è·¥ÖW·¥Ä…™·¥õ ·¥è“ì {str(e.x)}s from [{m.from_user.first_name}](tg://user?id={m.from_user.id})\n\n**ùöÑùöúùöéùöõ ùô∏ùô≥ :** `{str(m.from_user.id)}`", disable_web_page_preview=True, parse_mode="Markdown")

